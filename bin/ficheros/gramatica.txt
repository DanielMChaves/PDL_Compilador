Terminales = { \n var id if ( ) do { } while = int bool chars
			return write prompt function , && > - ++ entero cadena true 
			false }

NoTerminales = { ProgramaPrincipal Programa Salto Decla_FuncionComp 
			Con_Sin Tipo Cuerpo Sentencia Sentencia_llamada Funcion 
			TipoFuncion Argumentos MasArgumentos Parametros MasParametros 
			Expresion Expresion_2 Relacional Relacional_2 Unario Unario_2 
			Valor Valor_llamada Return_llamada }

Axioma = ProgramaPrincipal

Producciones = {

	ProgramaPrincipal -> Programa

	Programa -> Decla_FuncionComp Salto Programa
	Programa -> Funcion Salto Programa
	Programa -> Salto Programa
	Programa -> lambda
	
	Salto -> \n 

	Decla_FuncionComp -> var Tipo id Con_Sin
	Decla_FuncionComp -> if ( Expresion ) Sentencia
	Decla_FuncionComp -> do Salto { Salto Cuerpo Salto } while ( Expresion )
	Decla_FuncionComp -> Sentencia

	Con_Sin -> = Expresion
	Con_Sin -> lambda

	Tipo -> int
	Tipo -> bool
	Tipo -> chars

	Cuerpo -> Decla_FuncionComp Salto Cuerpo
	Cuerpo -> lambda

	Sentencia -> return Return_llamada
	Sentencia -> write ( Expresion )
	Sentencia -> prompt ( id )
	Sentencia -> id Sentencia_llamada

	Return_llamada -> Expresion
	Return_llamada -> lambda

	Sentencia_llamada -> ( Parametros )
	Sentencia_llamada -> = Expresion

	Funcion -> function TipoFuncion id ( Argumentos ) Salto { Salto Cuerpo }

	TipoFuncion -> Tipo
	TipoFuncion -> lambda

	Argumentos -> Tipo id MasArgumentos
	Argumentos -> lambda

	MasArgumentos -> , Tipo id MasArgumentos
	MasArgumentos -> lambda

	Parametros -> Expresion MasParametros
	Parametros -> lambda

	MasParametros -> , Expresion MasParametros
	MasParametros -> lambda

	Expresion -> Relacional Expresion_2

	Expresion_2 -> && Relacional Expresion_2
	Expresion_2 -> lambda

	Relacional -> Unario Relacional_2

	Relacional_2 -> > Unario Relacional_2
	Relacional_2 -> lambda

	Unario -> Valor Unario_2

	Unario_2 -> - Valor Unario_2
	Unario_2 -> lambda

	Valor -> ( Expresion )
	Valor -> ++ id
	Valor -> entero
	Valor -> cadena
	Valor -> true
	Valor -> false
	Valor -> id Valor_llamada

	Valor_llamada -> ( Parametros )
	Valor_llamada -> lambda

}
